Ex1:
	_mm_load_si128 : Load 128-bits of integer data from memory into dst. mem_addr must be aligned on a 16-byte boundary or a general-protection exception may be generated.
	_mm_loadu_si128: Load 128-bits of integer data from memory into dst. mem_addr does not need to be aligned on any particular boundary.
	_mm_load_pd    : Load 128-bits (composed of 2 packed double-precision (64-bit) floating-point elements) from memory into dst. mem_addr must be aligned on a 16-byte boundary or a general-protection exception may be generated.
	_mm_load1_pd   : Load a double-precision (64-bit) floating-point element from memory into both elements of dst.
	
	_mm_load_si128 and _mm_loadu_si128 load integer data, while _mm_load_pd and _mm_load1_pd load floating-point data. 

Ex2:
	Naive implementation iterates over each element in the matrices and perform the multiplication and addition operations one at a time. We need to perform n*p*4 operations.
	
	SIMD implementation perform the same operation on 4 elements at a time. We only need to perform n*p operations.
	
Ex3:
	loop_unroll_matmul() function unrolls the inner loop of the naive matrix multiplication implementation to process two elements at a time
	
	loop_unroll_simd_matmul() function unrolls the inner loop and uses SIMD instructions to process four elements at a time
